@page "/photos/{GalleryPath}"
@layout NoMenuLayout
@rendermode InteractiveServer
@using Directory = System.IO.Directory;
@using PSC.Blazor.Components.BrowserDetect
<link href="PhotosPage.css?v=102" rel="stylesheet" />
@inject NavigationManager NavigationManager
@inject IHttpContextAccessor HttpContextAccessor
@inject RequestInfoService RequestInfo
@inject IJSRuntime JSRuntime

<div class="page @(AllowLoadingPhotos ? "" : "pageFullScreen")">
<div class="content px-4">


<div class="header">
	@if(directory != null){
		<h1>@(directory.Title.Length > 1 ? directory.Title : GalleryPath)</h1>
		<p>@directory.description</p>
	}
	<hr />
</div>
<div class="mobileWarn" style="display: none; text-shadow: 1px 1px 3px white;">
	<img src="/gfx/bestviewedondesktop.png" />
	<p>Prohlížíte galerii na mobilním zařízení.<br />Pro lepší funkčnost prosím otevřete stránku na počítači.</p>
	<script>
		//on resize listener, that will show the warn if the width of viewer is smaller than 900px
		window.addEventListener('resize', function() {
			if (window.innerWidth < 600) {
				document.querySelector('.mobileWarn').style.display = 'block';
			} else {
				document.querySelector('.mobileWarn').style.display = 'none';
			}
		});
		if (window.innerWidth < 600) {
			document.querySelector('.mobileWarn').style.display = 'block';
		} else {
			document.querySelector('.mobileWarn').style.display = 'none';
		}
	</script>
</div>
<div class="gallery">
	@if(!string.IsNullOrEmpty(error)){
		<div class="error">
			<img src="/gfx/error.ico" style="width: 32px" />
			<div style="color: red; text-shadow: 0px 0px 3px white, 1px 1px 5px white;">@((MarkupString)error)</div>
		</div>
	}
	@{int index = 0;}
	@if(directory != null){
		@foreach (var subDir in directory.GetSortedSubdirectories()) {
			if(AllowLoadingPhotos){
				if(subDir.iconExists.Length > 1){
					<h2 class="textGlowWhite">
						<img src="@($"{rootPathWeb}/{GalleryPath}/Photos/{subDir.pathName}/{subDir.iconExists}")" style="width: 32px; height: 32px; vertical-align: middle; margin-right: 5px; margin-top: -5px;" />
						@subDir.name
					</h2>
				}
				else{
					<h2 class="textGlowWhite">@subDir.name</h2>
				}
				<p class="textGlowWhite">@((MarkupString)subDir.description)</p>
				<div class="gallerySubdir">
					@foreach(var photo in Photograph.SortPhotoGraphByDate(subDir.photographs)) {
						<Photo photograph="@photo" index="@index" whiteBorder="23" enlargeOnHover="true" maxSize="@maxPhotoSize" OnClick="PhotoClicked" showPin/>
						index++;
					}
				</div>
				<br />
			}
		}
	}
	@if(AllowLoadingPhotos && index == 0 ){
		  <div class="error">
			  <img src="/gfx/error.ico" style="width: 32px"/>
			  <div style="color: red; text-shadow: 0px 0px 3px white, 1px 1px 5px white;">Galerie neobsahuje žádné fotografie</div>
		  </div>
	}
	@if(directory == null && !AccessDenied){
		<p class="textGlowWhite"><img style="display: inline;" src="/gfx/busy aero fast.gif" />Fotky se načítají, čekejte prosím</p>
	}
</div>
</div> <!--close page-->
</div> <!--close content-->
<script>
window.sendAccessLog = function (logData) {
    fetch('https://tobikcze.eu/galerie/twgAccessLog.php', {
        method: 'POST',
        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
        body: new URLSearchParams(logData)
    });
};
</script>
<script>
	function setCookie(name, value, days) {
		var expires = "";
		if (days) {
			var date = new Date();
			date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
			expires = "; expires=" + date.toUTCString();
		}
		document.cookie = name + "=" + (value || "") + expires + "; path=/";
	}

	function getCookie(name) {
		var nameEQ = name + "=";
		var ca = document.cookie.split(';');
		for (var i = 0; i < ca.length; i++) {
			var c = ca[i];
			while (c.charAt(0) == ' ') c = c.substring(1, c.length);
			if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length);
		}
		return null;
	}

	var newString = "Zobrazit nové flex zobrazení";
	var oldString = "Zobrazit staré grid zobrazení";

	function setGrid(useGrid) {
		var galleries = document.querySelectorAll('.gallerySubdir');
		galleries.forEach(function (gallery) {
			if (useGrid) {
				gallery.classList.add('grid');
			} else {
				gallery.classList.remove('grid');
			}
		});
		document.getElementById('stareGridZobrazeni').innerText = useGrid ? newString : oldString;
		setCookie('useGrid', useGrid ? 'true' : 'false', 30); // Save the setting in a cookie
		console.log("changed view to " + (useGrid ? "old grid view" : "flex view"));
	}

	function grid() {
		console.log("grid mode change");
		var gallery = document.querySelector('.gallerySubdir');
		if (gallery.classList.contains('grid')) {
			setGrid(false);
		} else {
			setGrid(true);
		}
	}
	function setGridFromCookie() {
		var useGrid = getCookie('useGrid');
		if (useGrid === 'true') {
			setGrid(true);
		} else {
			setGrid(false);
		}
	}
	// Load the view setting from the cookie when the page is loaded
	window.addEventListener('load', function () {
		setGridFromCookie();
	});


</script>
<div class="@(AllowLoadingPhotos ? "" : "pinToBottom")">
	<button id="stareGridZobrazeni" class="AeroButton center-button" onclick="grid()">Zobrazit staré grid zobrazení</button>
	<div class="footer">
		<hr>
		<p class="programName"><a href="https://github.com/T0biasCZe/TWG5000/" class="no-a-deco">Tobik Web Gallery 5000</a></p>
		<p>© 2024 - 2025 T0biasCZe</p>
		<div class="buttons8831">
			<img src="/gfx/buttons/Blazor.png" />
			<img src="/gfx/buttons/kofola2.png" />
			<img src="/gfx/buttons/made_with_windows.gif" />
			<img src="/gfx/buttons/unraid2.png" />
			<img src="/gfx/buttons/Arch.png" />
			<img src="/gfx/buttons/winserver2022.png" />
			<img src="/gfx/buttons/wmp.png" />
			<img src="/gfx/buttons/iso8601.png" />

			@if (Info?.BrowserName.Contains("Firefox") == true){
				<img src="/gfx/buttons/optimalizedforfirefox.gif" />
			}
			else {
				if (Info?.DeviceType == "Phone") {
					<a href="https://www.mozilla.org/cs/firefox/browsers/mobile/"> <img src="/gfx/buttons/get-firefox.gif" /></a>
				}
				else {
					<a href="https://www.mozilla.org/cs/firefox/new/"> <img src="/gfx/buttons/get-firefox.gif" /></a>
				}
			}
		</div>
	</div>
	@if(directory != null && directory.enableComments){
		if(AllowLoadingPhotos){
			if(!string.IsNullOrEmpty(fullWindowsPath)){
				<CommentSection Path="@(fullWindowsPath.Replace(@"\Photos", @"\"))" WebPath="@(rootPathWeb + GalleryPath)" info="@RequestInfo" />
			}
		}
	}
</div>
<PhotoEnlarge @ref="photoEnlarge" />


<BrowserDetect @bind-BrowserInfo="@Info"/>

@code {
	private bool AllowLoadingPhotos = false;
	private bool AccessDenied = false;
	Size maxPhotoSize = new Size(400, 300);
	string error = "";
	[Parameter] public required string GalleryPath { get; set; }
	Models.Directory directory = null;

	public BrowserInfo? Info { get; set; }

	public static string rootPath = "";
	public static string rootPathWeb = "";
	public string fullWindowsPath = "";
	public string password = "";
	public bool errorOnInit = false;

	public struct BrowserData{
		public string IP;
		public string UA;
		public string Ref;
		public string Path;
	}
	BrowserData browserInfo = new BrowserData{
		IP = "",
		UA = "",
		Ref = "",
		Path = ""
	};
	protected override void OnInitialized() {

		string baseDirectory = AppContext.BaseDirectory;

		//check if file "startDir.txt" exists next to the program exe
		string rootPathFile = Path.Combine(baseDirectory, "rootPath.txt");
		if(System.IO.File.Exists(rootPathFile)) {
			Console.WriteLine("Root path found");
			rootPath = System.IO.File.ReadAllText(rootPathFile);
		}
		else {
			Console.WriteLine("Root path not found");
		}

		// Check if file "rootPathWeb.txt" exists next to the program exe
		string rootPathWebFile = Path.Combine(baseDirectory, "rootPathWeb.txt");
		if(System.IO.File.Exists(rootPathWebFile)) {
			Console.WriteLine("Root path web found");
			rootPathWeb = System.IO.File.ReadAllText(rootPathWebFile);
		}
		else {
			Console.WriteLine("Root path web not found");
		}

		if(string.IsNullOrEmpty(rootPath)) {
			error = "Nelze načíst fotografie, protože program nemá nastaven kořenový adresář se zdrojem fotografií<br>" +  
			"Unable to load photographs, because the program doesnt have root directory setup";
			errorOnInit = true;
			return;
		}
		if(string.IsNullOrEmpty(rootPathWeb)) {
			error = "Nelze načíst fotografie, protože program nemá nastaven kořenový adresář pro web<br>" +  
			"Unable to load photographs, because the program doesnt have root directory setup for web";
			errorOnInit = true;
			return;
		}

		firstRender = true;
	}
	bool firstRender = true;
	protected async override Task OnAfterRenderAsync(bool firstRender) {
		Console.ForegroundColor = ConsoleColor.Cyan;
		Console.WriteLine("Loading RequestInfo from cookies in OnAfterRenderAsync");
		LoadRequestInfoFromCookiesAsync();
		Console.WriteLine("RequestInfo loaded from cookies: " + 
		$"IP: {browserInfo.IP}, UA: {browserInfo.UA}, Ref: {browserInfo.Ref}, Path: {browserInfo.Path}");
		Console.ResetColor();
		ProcessAccessLogQueue(browserInfo);


		if(!errorOnInit && firstRender) {
			Console.WriteLine("First render");
			fullWindowsPath = rootPath + "\\" + GalleryPath + "\\Photos";
			//check if the path exists
			if(!Directory.Exists(fullWindowsPath)) {
				error = "Nelze načíst fotografie, protože na specifikované adrese není žádná fotogalerie<br>" +
				"Unable to load photographs, because there is no gallery at the specified address";
				errorOnInit = true;
				return;
			}
			Console.WriteLine("Loading directory: " + fullWindowsPath);
			directory = Models.Directory.LoadDirectory(fullWindowsPath);
			if(directory.PasswordProtected) {
				Console.BackgroundColor = ConsoleColor.Yellow;
				Console.ForegroundColor = ConsoleColor.Black;
				Console.WriteLine("Password protected gallery");
				//check if the url contains query parameter "psw"
				string uri = NavigationManager.Uri;
				//parse the psw parameter from the url
				var uriBuilder = new UriBuilder(uri);
				var query = System.Web.HttpUtility.ParseQueryString(uriBuilder.Query);
				password = query.Get("psw");
				string loginUrl = "photos/" + GalleryPath + "/login";
				if(string.IsNullOrEmpty(password)) {
					Console.BackgroundColor = ConsoleColor.Yellow;
					Console.WriteLine("Password not entered");

					//redirect to the login page
					//NavigationManager.NavigateTo("photos/" + GalleryPath + "/login");
					error = $"Tahle fotogalerie požaduje k přístupu heslo.<br>This Photogallery requires password to be entered<br><a href='{loginUrl}'>Zpátky na příhlášení<br>Back to login</a>";
					AccessLogToQueue("Pokus o načtení galerie bez hesla", "");

					AccessDenied = true;
				}
				else {
					Console.BackgroundColor = ConsoleColor.Yellow;
					Console.ForegroundColor = ConsoleColor.Black;
					Console.WriteLine("Password entered: " + password);
					//check if the password is correct
					if(directory.passwords.Any(p => p.password == password)) {
						Console.BackgroundColor = ConsoleColor.Green;
						Console.WriteLine("Password correct");
						//password correct
						AllowLoadingPhotos = true;
						AccessLogToQueue("Načtení galerie se správným heslem", password);
					}
					else {
						Console.BackgroundColor = ConsoleColor.Red;
						Console.WriteLine("Password incorrect");
						//password incorrect
						error = $"Nesprávné heslo<br>Incorrect password<br><a href='{loginUrl}'>Zpátky na příhlášení<br>Back to login</a>";
						AccessLogToQueue("Pokud o načtení se špatným heslem", password);
						AccessDenied = true;
					}
				}
			}
			else {
				AccessLogToQueue("Načtení nezaheslované galerie", "");
				Console.BackgroundColor = ConsoleColor.Green;
				Console.ForegroundColor = ConsoleColor.Black;
				Console.WriteLine("Gallery not password protected, allowing load");
				AllowLoadingPhotos = true;
			}
			Console.ResetColor();
		}
		else {
			Console.WriteLine("Not first render");
		}
		firstRender = false;

		await JSRuntime.InvokeVoidAsync("setGridFromCookie");
	}

	private async Task LoadRequestInfoFromCookiesAsync(){
		// Helper JS function to get a cookie value by name
		string GetCookieJs(string name) =>
			$"(document.cookie.split('; ').find(row => row.startsWith('{name}='))||'').split('=')[1]||''";

		browserInfo.IP = await JSRuntime.InvokeAsync<string>("eval", GetCookieJs("TWG_IP"));
		browserInfo.UA = await JSRuntime.InvokeAsync<string>("eval", GetCookieJs("TWG_UA"));
		browserInfo.Ref = await JSRuntime.InvokeAsync<string>("eval", GetCookieJs("TWG_Ref"));
		browserInfo.Path = await JSRuntime.InvokeAsync<string>("eval", GetCookieJs("TWG_Path"));
	}

	private PhotoEnlarge? photoEnlarge;
	protected void PhotoClicked(Photograph photo) {
		Console.WriteLine("photospage.razor, PhotoClicked");
		if (photoEnlarge == null){
			Console.WriteLine("PhotoEnlarge is null");
			return;
		}
		photoEnlarge.photograph = photo;
		photoEnlarge.commentsEnabled = directory?.enableComments ?? false;
		photoEnlarge.Show();
		photoEnlarge.TriggerStateChange(); // Call the new method to trigger state change
	}
	public struct AccessLogData {
		public string IpAddress { get; set; }
		public string Path { get; set; }
		public string UserAgent { get; set; }
		public string Referer { get; set; }
		public string Password { get; set; }
		public string Message { get; set; }
		public DateTime Timestamp;
	}

    private async Task SendAccessLogToPhpAsync(DateTime time, string password, string url, string message)
    {
        var logData = new Dictionary<string, string>
        {
            { "time", time.ToString("yyyy-MM-dd HH:mm:ss") },
            { "password", password ?? "" },
            { "url", url ?? "" },
            { "message", message ?? "" }
        };
        await JSRuntime.InvokeVoidAsync("sendAccessLog", logData);
    }
	public List<AccessLogData> AccessLogQueue { get; set; } = new List<AccessLogData>();
	public async Task ProcessAccessLogQueue(BrowserData info) {
		Console.WriteLine("Processing access log queue, count: " + AccessLogQueue.Count);
		foreach (var log in AccessLogQueue) {
			string ip = string.IsNullOrEmpty(log.IpAddress) || log.IpAddress == "Unknown" ? info.IP : log.IpAddress;
			string path = string.IsNullOrEmpty(log.Path) || log.Path == "Unknown" ? info.Path : log.Path;
			string userAgent = string.IsNullOrEmpty(log.UserAgent) || log.UserAgent == "Unknown" ? info.UA : log.UserAgent;
			string referer = string.IsNullOrEmpty(log.Referer) || log.Referer == "Unknown" ? info.Ref : log.Referer;

			AccessLogger.Log(ip, path, userAgent, referer, log.Password, log.Message, log.Timestamp);
            await SendAccessLogToPhpAsync(log.Timestamp, log.Password, path, log.Message);

		}
		AccessLogQueue.Clear();
	}
	public async Task AccessLog(string zprava, string heslo) {
		AccessLogger.Log(
			RequestInfo.IpAddress,
			RequestInfo.Path,
			RequestInfo.UserAgent,
			RequestInfo.Referer,
			heslo, zprava
		);
        await SendAccessLogToPhpAsync(DateTime.Now, heslo, $"{rootPathWeb}/{GalleryPath}", zprava);
	}
	public void AccessLogToQueue(string zprava, string heslo) {
		AccessLogQueue.Add(new AccessLogData {
			IpAddress = RequestInfo.IpAddress,
			//Path = browserInfo.Path,
			Path = $"{rootPathWeb}/{GalleryPath}",
			UserAgent = browserInfo.UA,
			Referer = browserInfo.Ref,
			Password = heslo,
			Message = zprava,
			Timestamp = DateTime.Now
		});
		Console.WriteLine("Access log queued: " + zprava);
	}
}
