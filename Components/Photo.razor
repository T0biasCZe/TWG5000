@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
@{
#pragma warning disable CSS039
}
@{
	var videoKey = $"{photograph.webPath}-{Guid.NewGuid()}";
}

<div @onclick="HandleClick" @ondblclick="HandleDblClick" style="width: @(calculatedSize.Width)px; height: @(calculatedSize.Height)px;" class="photoGraphBody @(enlargeOnHover ? "photoEnlargeOnHover" : "")" id="@photograph.fileNameWithoutExtension">
	@if(showPin) {
		<img src="/gfx/Red-Pin.png" class="red-pin" style="left: @(pinPosition)px" />
	}
	@if(!enlargeView){
		<span class="photoGraphTitle">@((MarkupString)(EmojiHelper.ReplaceEmojis(photograph.title)))</span>
	}<!--else{
		<span class="photoGraphTitleEnlarge">@photograph.title</span>
	}-->
	@if(photograph.isLivePhoto && enlargeView) {
		<span class="livePhotoWarn">Live photo, načítání může pár sekund trvat</span>
	}
	@if(!enlargeView && photograph.audioPath.Length > 1){
		<img src="/gfx/audio/mute.png" style="top: 2px; right: 2px; position: absolute; z-index: 999"/>
	}
	@if(!enlargeView && photograph.isVideo){
		<img src="/gfx/videoindicator.png" style="top: 2px; max-height: 21px; right: 2px; position: absolute; z-index: 999"/>
	}
	@if(!enlargeView && photograph.isLivePhoto){
		<img src="/gfx/livephotoindicator.png" style="top: 2px; right: 2px; position: absolute; z-index: 999"/>
	}
	@if(!enlargeView && photograph.is3D){
		<img src="/gfx/3dindicator.png" style="top: 2px; right: 2px; max-height: 21px; position: absolute; z-index: 999"/>
	}
	<div style="border: @(whiteBorder)px solid white; width: @(calculatedSize.Width)px; height: @(calculatedSize.Height)px;" class='photoGraph'>
		@if(photograph.isLivePhoto && enlargeView) {
			Console.WriteLine("Enlarge view and live photo.");
			//add video tag, and set the src to the webPath, but replace the extension to .mov

			<video id="@(new Random().Next(0,100000))" key="@videoKey" autoplay loop playsinline style="width: @(calculatedSize.Width - whiteBorder * 2)px; height: @(calculatedSize.Height - whiteBorder * 2)px; @(isNsfwCss)" src=@Path.ChangeExtension(photograph.webPath, ".MOV")>
				<!--Set fallback .jpg img for when the browser doesnt support .mov or .h264-->
				<img src="@usedWebPath" alt="@photograph.title" style="width: @(calculatedSize.Width - whiteBorder * 2)px; height: @(calculatedSize.Height - whiteBorder * 2)px; @(isNsfwCss)" />
			</video>

			@if(livePhotoAgainAlt) {
				JSRuntime.InvokeVoidAsync("ReloadVideo");
			}
		}
		else if (photograph.isVideo && enlargeView){
			Console.WriteLine("Enlarge view and video.");
			//add video tag, and set the src to the webPath, but replace the extension to .mov

			<video id="@(new Random().Next(0,100000))" key="@videoKey" autoplay loop playsinline controls style="width: @(calculatedSize.Width - whiteBorder * 2)px; height: @(calculatedSize.Height - whiteBorder * 2)px; @(isNsfwCss)" src=@photograph.webPathMedium>
				<!--Set fallback .jpg img for when the browser doesnt support .mov or .h264-->
				<img src="@usedWebPath" alt="@photograph.title" style="width: @(calculatedSize.Width - whiteBorder * 2)px; height: @(calculatedSize.Height - whiteBorder * 2)px; @(isNsfwCss)" />
			</video>

			@if(livePhotoAgainAlt) {
				JSRuntime.InvokeVoidAsync("ReloadVideo");
			}
		}
		else if(!photograph.is3D){
			<img src="@usedWebPath" alt="@photograph.title" style="width: @(calculatedSize.Width - whiteBorder * 2)px; height: @(calculatedSize.Height - whiteBorder * 2)px; @(isNsfwCss)" />
			//Console.WriteLine("audio file path: " + photograph.audioPath);
		}
		else {
			string script = "<script type='module' src='https://ajax.googleapis.com/ajax/libs/model-viewer/4.0.0/model-viewer.min.js'></script>";
			string modelViewer = $"<model-viewer src='{photograph.webPath}' alt='{photograph.title}' auto-rotate camera-controls style='width: {calculatedSize.Width - whiteBorder * 2}px; height: {calculatedSize.Height - whiteBorder * 2}px;'></model-viewer>";
			MarkupString markupString = new MarkupString(script + "\n" + modelViewer);
			@markupString
		}
	</div>
</div>

<script>
	function ReloadVideo(){
		setTimeout(() => {
			console.log("reloading video");
			var video = document.querySelector('video');
			let srcOld = video.src;
			console.log("src " + srcOld);
			video.src = "";
			video.load();

			setTimeout(() => {
				console.log("setting src to " + srcOld + " after 100ms");
				video.src = srcOld;
				//set random id
				video.load();
			}, 100); // Wait 1 second before setting the src and loading the video again
		}, 500);
	}
</script>

@code {
	public static string lastPhoto = "";
	public static string currentPhoto = "";
	public static bool lastPhotoLive = false;
	public static bool currentPhotoLive = false;

	public static bool livePhotoAgain {
		get{
			//if both last photo and current photo have .mov extension, return true. ignore case. however, if the last photo is the same as the current photo, return false
			if(lastPhotoLive && currentPhotoLive && lastPhoto != currentPhoto) {
				return true;
			}
			return false;
		}
	}
	public static bool livePhotoAgainAlt {
		get {
			//if both last photo and current photo have .mov extension, return true. ignore case. however, if the last photo is the same as the current photo, return false
			if(lastPhotoLive && currentPhotoLive) {
				return true;
			}
			return false;
		}
	}
	[Parameter]
	public Photograph photograph { get; set; }
	[Parameter]
	public int index { get; set; } //which photo on the page it is
	[Parameter]
	public int whiteBorder { get; set; }
	[Parameter]
	public bool enlargeOnHover { get; set; }
	[Parameter]

	public required Size maxSize { get; set; }
	[Parameter]
	public bool showPin { get; set; } = false;
	private int pinPosition = 0;

	[Parameter]
	public bool enlargeView { get; set; } // Ensure this parameter is defined

	//set the css so that it has pixel filter on it (16x16 pixels))
	private string isNsfwCss = "filter: blur(15px); transform: scale(1.2)";

	public enum UsedQuality {
		Tiny,
		Medium,
		Full
	}
	[Parameter]
	public UsedQuality quality { get; set; } = UsedQuality.Tiny;


	private string usedWebPath => quality switch {
		UsedQuality.Tiny => photograph.webPathTiny,
		UsedQuality.Medium => photograph.webPathMedium,
		_ => photograph.webPath
	};


	private Size calculatedSize;
	private double aspectRatio;

	protected override void OnParametersSet() {
		if (enlargeView) {
			lastPhoto = currentPhoto;
			currentPhoto = photograph.webPath;
			lastPhotoLive = currentPhotoLive;
			currentPhotoLive = photograph.isLivePhoto;
			Console.WriteLine("lastPhoto: " + lastPhoto + ", currentPhoto: " + currentPhoto);
			Console.WriteLine("live photo again: " + livePhotoAgain);
		}
		calculatedSize = CalculateSize(photograph.size, maxSize, whiteBorder);
		GetPinPosition();
		if(photograph.isNsfw == false || enlargeView) {
			isNsfwCss = "";
		}

		/*Console.WriteLine("PHOTO component - enlargeView:" + enlargeView);
		Console.WriteLine("PHOTO component - isLivePhoto:" + photograph.isLivePhoto);*/
	}

	public static Size CalculateSize(Size originalSize, Size maxSize, int whiteBorder)
	{
		// The border is on both sides, so subtract twice
		int contentMaxWidth = maxSize.Width - 2 * whiteBorder;
		int contentMaxHeight = maxSize.Height - 2 * whiteBorder;

		double aspectRatio = (double)originalSize.Width / originalSize.Height;

		// Find the scale factor to fit the content area (can be >1 for upscaling)
		double scale = Math.Min(
			(double)contentMaxWidth / originalSize.Width,
			(double)contentMaxHeight / originalSize.Height
		);

		// Scale width and height
		int scaledWidth = (int)Math.Round(originalSize.Width * scale);
		int scaledHeight = (int)Math.Round(originalSize.Height * scale);

		// The total size includes the border on both sides
		Size newSize = new Size(scaledWidth + 2 * whiteBorder, scaledHeight + 2 * whiteBorder);
		//Console.WriteLine($"Calculated size: {newSize.Width}x{newSize.Height} for original size: {originalSize.Width}x{originalSize.Height} with max size: {maxSize.Width}x{maxSize.Height} and white border: {whiteBorder}");
		return newSize;
	}

	[Parameter] public EventCallback<Photograph> OnClick { get; set; }

	private void HandleClick() {
		Console.WriteLine($"Photo clicked: {photograph.fileName}");
		//if gbl, ignore
		if(photograph.fileName.Contains("glb")) {
            return;
        }
		OnClick.InvokeAsync(photograph);
	}
	private void HandleDblClick() {
		Console.WriteLine($"Photo dbl clicked: {photograph.fileName}");
		//if not gbl, ignore
		if(!photograph.fileName.Contains("glb")) {
            return;
        }
		OnClick.InvokeAsync(photograph);
	}
	public void TriggerStateChange() {
		Console.WriteLine("Triggering Photo state change");
		calculatedSize = CalculateSize(photograph.size, maxSize, whiteBorder);
		StateHasChanged();
	}
	private void GetPinPosition() {
		//calculate random position between 30% and 70% of the photo
		Random random = new Random(photograph.fileName.GetHashCode());
		int percent = random.Next(40, 80);
		pinPosition = (int)(calculatedSize.Width * percent / 100);
    }

}
