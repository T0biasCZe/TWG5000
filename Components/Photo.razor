<!--<div class="photoGraphBody">
  <div class="photoGraph" style="border: @(whiteBorder)px solid white; @(enlargeOnHover ? "transform: scale(1.1);" : "")">
	<span class="photoGraphTitle">@photograph.title</span>
	<img src="@photograph.webPath" alt="@photograph.title" />
  </div>
</div>-->
@{
#pragma warning disable CSS039
}

<div @onclick="HandleClick" @ondblclick="HandleDblClick" style="width: @(calculatedSize.Width)px; height: @(calculatedSize.Height)px;" class="photoGraphBody @(enlargeOnHover ? "photoEnlargeOnHover" : "")">
	@if(showPin) {
		<img src="/gfx/Red-Pin.png" class="red-pin" style="left: @(pinPosition)px" />
	}
	<span class="photoGraphTitle">@photograph.title</span>
	<div style="border: @(whiteBorder)px solid white; width: @(calculatedSize.Width)px; height: @(calculatedSize.Height)px;" class='photoGraph'>
		@if(!photograph.is3D){
			<img src="@usedWebPath" alt="@photograph.title" style="width: @(calculatedSize.Width - whiteBorder * 2)px; height: @(calculatedSize.Height - whiteBorder * 2)px; @(isNsfwCss)" />
		}
		else {
			string script = "<script type='module' src='https://ajax.googleapis.com/ajax/libs/model-viewer/4.0.0/model-viewer.min.js'></script>";
			string modelViewer = $"<model-viewer src='{photograph.webPath}' alt='{photograph.title}' auto-rotate camera-controls style='width: {calculatedSize.Width - whiteBorder * 2}px; height: {calculatedSize.Height - whiteBorder * 2}px;'></model-viewer>";
			MarkupString markupString = new MarkupString(script + "\n" + modelViewer);
			@markupString
		}
	</div>
</div>

@code {
	[Parameter]
	public Photograph photograph { get; set; }
	[Parameter]
	public int index { get; set; } //which photo on the page it is
	[Parameter]
	public int whiteBorder { get; set; }
	[Parameter]
	public bool enlargeOnHover { get; set; }
	[Parameter]
	public required Size maxSize { get; set; }
	[Parameter]
	public bool showPin { get; set; } = false;
	private int pinPosition = 0;
	//set the css so that it has pixel filter on it (16x16 pixels))
	private string isNsfwCss = "filter: blur(15px); transform: scale(1.2)";

	public enum UsedQuality {
		Tiny,
		Medium,
		Full
	}
	[Parameter]
	public UsedQuality quality { get; set; } = UsedQuality.Tiny;


	private string usedWebPath => quality switch {
		UsedQuality.Tiny => photograph.webPathTiny,
		UsedQuality.Medium => photograph.webPathMedium,
		_ => photograph.webPath
	};


	private Size calculatedSize;
	private double aspectRatio;

	protected override void OnParametersSet() {
		calculatedSize = CalculateSize(photograph.size, maxSize, whiteBorder);
		GetPinPosition();
		if(photograph.isNsfw == false) {
			isNsfwCss = "";
		}
	}

	public static Size CalculateSize(Size originalSize, Size maxSize, int whiteBorder) {
		double aspectRatio = (double)originalSize.Width / originalSize.Height;

		double width = originalSize.Width;
		double height = originalSize.Height;

		if(width > maxSize.Width) {
			width = maxSize.Width;
			height = (int)(width / aspectRatio);
		}

		if(height > maxSize.Height) {
			height = maxSize.Height;
			width = (int)(height * aspectRatio);
		}

		return new Size((int)width + whiteBorder, (int)height + whiteBorder);
	}

	[Parameter] public EventCallback<Photograph> OnClick { get; set; }

	private void HandleClick() {
		Console.WriteLine($"Photo clicked: {photograph.fileName}");
		//if gbl, ignore
		if(photograph.fileName.Contains("glb")) {
            return;
        }
		OnClick.InvokeAsync(photograph);
	}
	private void HandleDblClick() {
		Console.WriteLine($"Photo dbl clicked: {photograph.fileName}");
		//if not gbl, ignore
		if(!photograph.fileName.Contains("glb")) {
            return;
        }
		OnClick.InvokeAsync(photograph);
	}
	public void TriggerStateChange() {
		Console.WriteLine("Triggering Photo state change");
		calculatedSize = CalculateSize(photograph.size, maxSize, whiteBorder);
		StateHasChanged();
	}
	private void GetPinPosition() {
		//calculate random position between 30% and 70% of the photo
		Random random = new Random(photograph.fileName.GetHashCode());
		int percent = random.Next(40, 80);
		pinPosition = (int)(calculatedSize.Width * percent / 100);
    }

}
